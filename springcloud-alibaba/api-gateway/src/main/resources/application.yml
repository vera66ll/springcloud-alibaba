server:
  port: 7000
spring:
  application:
    name: api-gateway  # 服务名
  cloud:
    # api-gateway服务注册到nacos中
    nacos:
      discovery:
        server-addr: localhost:8848
    gateway:        # 配置路由
      discovery:    # 配置路由允许路由从nacos中拉取其他微服务
        locator:
          enabled: true
      routes: # 路由数组是指当请求满足什么样的条件时发到哪个微服务上
        - id: product_route # 当前路由发的标识，要求唯一
#          uri: http://localhost:8081 # 请求最终要被转发到的地址
          uri: lb://service-product  # 请求最终要被转发到的地址,此时的地址只需要填写nacos服务中心中注册的服务名称,lb是nacos在客户端就实现了负载均衡
          order: 1 #路由的优先级，数字越小优先级越高
          predicates: #断言数组，条件判断，返回值是boolean，转发请求要满足的条件
            - Path=/product-serv/**   # 当请求路径满足path指定的规则时，此路由才会被正常转发
          filters: # 过滤器数组，请求传递过程中，对请求做一些手脚
            - StripPrefix=1 # 在请求创发之前去掉一层路径

        - id: order_route
          uri: lb://service-order #此时的地址只需要填写nacos服务中心中注册的服务名称,lb是nacos在客户端就实现了负载均衡
          order: 1
          predicates:
            - Path=/order-serv/**
          filters:
            - StripPrefix=1 # 在请求创发之前去掉一层路径
# 例如：如果不使用过滤器就会是
# http://localhost:7000/product-serv/product/1 --> http://localhost:8081/product-serv/product/1 多了一层一级路径
# 使用过滤器之后，请求妆发的路径为： http://localhost:7000/product-serv/product/1 --> http://localhost:8081/product/1
# 这样才正确了。
